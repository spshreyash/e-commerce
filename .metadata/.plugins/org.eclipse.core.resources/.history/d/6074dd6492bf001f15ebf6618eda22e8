package org.project.repo;

import org.project.models.ProductsModel;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class ProductsRepoImpl extends DBState implements ProductsRepo {

    // Method to create or update a product
    @Override
    public void saveOrUpdateProduct(ProductsModel product) {
        String checkCategoryQuery = "SELECT * FROM productcategories WHERE cid = ?";
        String insertQuery = "INSERT INTO products (name, price, quantity, cid) VALUES (?, ?, ?, ?)";
        String updateQuery = "UPDATE products SET name = ?, price = ?, quantity = ?, cid = ? WHERE pid = ?";

        PreparedStatement checkCategoryStmt = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // Check if the category exists
            checkCategoryStmt = conn.prepareStatement(checkCategoryQuery);
            checkCategoryStmt.setInt(1, product.getCid());
            rs = checkCategoryStmt.executeQuery();

            if (!rs.next()) {
                System.out.println("Category with CID " + product.getCid() + " does not exist.");
                return; // Exit if the category doesn't exist
            }

            // Check if the product exists
            String selectQuery = "SELECT * FROM products WHERE pid = ?";
            PreparedStatement selectStmt = conn.prepareStatement(selectQuery);
            selectStmt.setInt(1, product.getPid());
            rs = selectStmt.executeQuery();

            if (rs.next()) {
                // Product exists, perform UPDATE
                stmt = conn.prepareStatement(updateQuery);
                stmt.setString(1, product.getName());
                stmt.setInt(2, product.getPrice());
                stmt.setInt(3, product.getQuantity());
                stmt.setInt(4, product.getCid());
                stmt.setInt(5, product.getPid());
                stmt.executeUpdate();
                System.out.println("Product updated successfully.");
            } else {
                // Product does not exist, perform INSERT
                stmt = conn.prepareStatement(insertQuery);
                stmt.setString(1, product.getName());
                stmt.setInt(2, product.getPrice());
                stmt.setInt(3, product.getQuantity());
                stmt.setInt(4, product.getCid());
                stmt.executeUpdate();
                System.out.println("Product inserted successfully.");
            }
        } catch (SQLException e) {
            System.out.println("Error in saveOrUpdateProduct: " + e.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (checkCategoryStmt != null) checkCategoryStmt.close();
                if (stmt != null) stmt.close();
            } catch (SQLException e) {
                System.out.println("Error closing resources in saveOrUpdateProduct: " + e.getMessage());
            }
        }
    }

    // Method to delete a product by ID
    @Override
    public void deleteProduct(int pid) {
        String query = "DELETE FROM products WHERE pid = ?";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(query);
            stmt.setInt(1, pid);
            stmt.executeUpdate();
        } catch (SQLException e) {
            System.out.println("Error in deleteProduct: " + e.getMessage());
        } finally {
            try {
                if (stmt != null) stmt.close();
            } catch (SQLException e) {
                System.out.println("Error closing resources in deleteProduct: " + e.getMessage());
            }
        }
    }

    // Method to get all products
    @Override
    public List<ProductsModel> getAllProducts() {
        List<ProductsModel> productsList = new ArrayList<>();
        String query = "SELECT * FROM products";
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            stmt = conn.prepareStatement(query);
            rs = stmt.executeQuery();

            while (rs.next()) {
                ProductsModel product = new ProductsModel();
                product.setPid(rs.getInt("pid"));
                product.setName(rs.getString("name"));
                product.setPrice(rs.getInt("price"));
                product.setQuantity(rs.getInt("quantity"));
                product.setCid(rs.getInt("cid"));
                productsList.add(product);
            }
        } catch (SQLException e) {
            System.out.println("Error in getAllProducts: " + e.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
            } catch (SQLException e) {
                System.out.println("Error closing resources in getAllProducts: " + e.getMessage());
            }
        }

        return productsList;
    }

    // Method to get a product by its ID
    @Override
    public ProductsModel getProductById(int pid) {
        ProductsModel product = null;
        String query = "SELECT * FROM products WHERE pid = ?";
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            stmt = conn.prepareStatement(query);
            stmt.setInt(1, pid);
            rs = stmt.executeQuery();

            if (rs.next()) {
                product = new ProductsModel();
                product.setPid(rs.getInt("pid"));
                product.setName(rs.getString("name"));
                product.setPrice(rs.getInt("price"));
                product.setQuantity(rs.getInt("quantity"));
                product.setCid(rs.getInt("cid"));
            }
        } catch (SQLException e) {
            System.out.println("Error in getProductById: " + e.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
            } catch (SQLException e) {
                System.out.println("Error closing resources in getProductById: " + e.getMessage());
            }
        }

        return product;
    }

    // Method to filter products by price
    @Override
    public List<ProductsModel> getProductsByPrice(int maxPrice) {
        List<ProductsModel> filteredProducts = new ArrayList<>();
        String query = "SELECT * FROM products WHERE price <= ?";
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            stmt = conn.prepareStatement(query);
            stmt.setInt(1, maxPrice);
            rs = stmt.executeQuery();

            while (rs.next()) {
                ProductsModel product = new ProductsModel();
                product.setPid(rs.getInt("pid"));
                product.setName(rs.getString("name"));
                product.setPrice(rs.getInt("price"));
                product.setQuantity(rs.getInt("quantity"));
                product.setCid(rs.getInt("cid"));
                filteredProducts.add(product);
            }
        } catch (SQLException e) {
            System.out.println("Error in getProductsByPrice: " + e.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
            } catch (SQLException e) {
                System.out.println("Error closing resources in getProductsByPrice: " + e.getMessage());
            }
        }

        return filteredProducts;
    }

    // Method to filter products by quantity
    @Override
    public List<ProductsModel> getProductsByQuantity(int minQuantity) {
        List<ProductsModel> filteredProducts = new ArrayList<>();
        String query = "SELECT * FROM products WHERE quantity >= ?";
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            stmt = conn.prepareStatement(query);
            stmt.setInt(1, minQuantity);
            rs = stmt.executeQuery();

            while (rs.next()) {
                ProductsModel product = new ProductsModel();
                product.setPid(rs.getInt("pid"));
                product.setName(rs.getString("name"));
                product.setPrice(rs.getInt("price"));
                product.setQuantity(rs.getInt("quantity"));
                product.setCid(rs.getInt("cid"));
                filteredProducts.add(product);
            }
        } catch (SQLException e) {
            System.out.println("Error in getProductsByQuantity: " + e.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
            } catch (SQLException e) {
                System.out.println("Error closing resources in getProductsByQuantity: " + e.getMessage());
            }
        }

        return filteredProducts;
    }

    // Method to update product price and quantity
    @Override
    public void updateProductPriceAndQuantity(int pid, int price, int quantity) {
        String query = "UPDATE products SET price = ?, quantity = ? WHERE pid = ?";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(query);
            stmt.setInt(1, price);
            stmt.setInt(2, quantity);
            stmt.setInt(3, pid);
            stmt.executeUpdate();
        } catch (SQLException e) {
            System.out.println("Error in updateProductPriceAndQuantity: " + e.getMessage());
        } finally {
            try {
                if (stmt != null) stmt.close();
            } catch (SQLException e) {
                System.out.println("Error closing resources in updateProductPriceAndQuantity: " + e.getMessage());
            }
        }
    }
}
